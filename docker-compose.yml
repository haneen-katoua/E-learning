version: '3.9'
services:
    redis:
            image: redis:alpine
            ports:
               - 6379:6379
            networks:
              - djangonetwork

    rabbitmq_server:
        image: rabbitmq:3-management
        ports:
            - 5672:5672
        # OPTIONAL: Expose the GUI port
            # - 15672:15672
        networks:
              - djangonetwork
    db :
            image: postgres
            volumes:
                - ./data/db:/var/lib/postgresql/data
            ports: 
                - "5432:5432"
            env_file: ./backend/.env
            healthcheck:
                test: ["CMD-SHELL", "pg_isready"]
                interval: 30s
                timeout: 10s
                retries: 5
            networks:
              - djangonetwork
        
    backend:
        build: 
            context: ./backend/
        volumes:
            - ./backend/:/django
        ports:
            - "8000:8000"
        # command:  gunicorn --bind 0.0.0.0:8000 eLearning.wsgi:application
        command: uvicorn eLearning.asgi:application --host 0.0.0.0 --port 8000 --log-level debug --reload
        # - python manage.py runserver 0.0.0.0:8000
        env_file: ./backend/.env
        image: app:django
        restart: on-failure
        depends_on:
            db:
                condition: service_healthy

        links: 
            - db
            - minio
        networks:
              - djangonetwork
    
    #pg admin
    pgadmin:
        container_name: pgadmin4
        image: dpage/pgadmin4
        restart: always
        volumes:
        - ./data/pgadmin-data:/var/lib/pgadmin
        environment:
            PGADMIN_DEFAULT_EMAIL: root@root.com
            PGADMIN_DEFAULT_PASSWORD: root
        # PGADMIN_LISTEN_PORT = 80
        ports:
        - "5050:80"
        networks:
              - djangonetwork
      # Celery
    celery:
        restart: always
        build:
            context: ./backend/
        command: celery -A eLearning worker -l DEBUG
        volumes:
            - ./backend/:/django
        depends_on:
            - db
            - redis
            - rabbitmq_server
            - backend
        networks:
              - djangonetwork

    # frontend:
    #     build:
    #         context: ./frontend/my-app/
    #     volumes:
    #         # - ./frontend/my-app/:/core
    #         - react_build:/react/build
    #     ports:
    #         - 3000:3000
    #     image: app:react
    #     command: npm start
    #     networks:
    #           - djangonetwork
    nginx:
        image: nginx:latest
        ports:
            - 80:8080
        volumes:
            - ./nginx/nginx-setup.conf:/etc/nginx/conf.d/default.conf:ro
            - react_build:/var/www/react
        depends_on:
            - backend
            # - frontend
        networks:
              - djangonetwork
    flower:
        image: mher/flower
        restart: always
        # command: celery -A eLearning flower --port=5555
        ports:
        - 5555:5555
        environment:
            CELERY_BROKER_URL : "amqp://guest:guest@rabbitmq_server:5672/"
            CELERY_RESULT_BACKEND :  "redis://redis:6379/0"
        depends_on:
            - celery
            - rabbitmq_server
        networks:
            
            - djangonetwork
    minio:
        image: minio/minio:latest
        ports:
            - 9000:9000
            - 9001:9001
        container_name: minio
        # env_file: ./backend/.env
        command: server --console-address :9001  /data 
        # command: server /export
        environment:
            MINIO_ACCESS_KEY: minio
            MINIO_SECRET_KEY: minio123

        volumes:
            - minio-data:/data
        networks:
            - djangonetwork

    # minio-client: 
    #     image: minio/mc:latest
    #     depends_on:
    #         - minio
    #     entrypoint: >
    #         /bin/sh -c "
    #         /usr/bin/mc config host add --api s3v4 s3 http://localhost:9000 minio minio123;
    #         /usr/bin/mc mb s3/elearning/;
    #         /usr/bin/mc anonymous set download s3/elearning;
    #         "
    #     networks:
    #         - djangonetwork
networks:
      djangonetwork:
          driver: bridge
volumes:
    react_build:
    minio-data: